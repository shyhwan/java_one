/** 숫자 & 문자열 **********************************************/
자바에서는 문자는 ""로 감싸 작성하며, ''로 작성시 에러가 난다.
문자안에 "를 문자로 넣고 싶을 경우 이스케이프 문자(\)를 앞에 붙여 사용한다.
숫자는 숫자만 사용한다.

/** 변수 - 변하는 값 **********************************************/
변수는 데이터를 담는 공간이며, [데이터타입] [변수명]; 으로 선언후 할당하여 사용한다.
사용 방식에 따라 지역변수, 매개변수, 인스턴스 변수, 정적 변수로 나뉜다.

/** 상수 - 변하지 않는 값 **********************************************/

/** 데이터 타입 **********************************************/
char	문자(2BYTE)	하나의 글자를 의미한다.
String	문자열()		char의 배열을 사용한다. 문자가 작성된 만큼 데이터가 늘어난다.(한계 용량은 heap 메모리와 연관있다.)
byte	정수(1BYTE)	-128~127
short	정수(2BYTE)	-32,768~32,767
int		정수(4BYTE)	-2,147,483,648~2,147,483,647
long	정수(8BYTE)	-9,223,372,036,854,775,808~9,223,372,036,854,775,807
double	실수(4BYTE)	굉장히크다(기본으로 사용)
float	실수(8BYTE)	굉장히더크다
boolean				true, false 를 변수로 입력하여 사용한다.

/** 형변환 & 자동형변환 **********************************************/

/** 연산자(operator) **********************************************/

산술연산자
+	더하기	++ 사용하여 1씩 플러스 할수 있다.
-	뺴기		-- 사용하여 1씩 마이너스 할수 있다.
*	곱하기
/	나누기
%	나머지

비교연산자
==	좌항과 우항의 값이 같으면 true("".equals("")으로도 사용한다.)
!=	좌항과 우항의 값이 다르면 true
>	좌항이 우항보다 크면 true
<	좌항이 우항보다 작으면 true
<=	좌항이 우항보다 작거나 같으면 true
>=	좌항이 우항보다 크거나 같으면 true

논리연산자
&&	AND		조건중 값이 ture인것을 찾을 때 사용
||	OR		조건중 값이 하나라도 true인것을 찾을 때 사용
!	NOT		부정 true 앞에 붙이면 false, false 앞에 붙이면 true로 바꾼다

/** 조건문 **********************************************/
IF
if(ture) { }	if절과 {}(then절)로 구성된다.

ELSE
if(true) {	}		if만으로는 처리 하기 어려울때 else 를 사용한다. 
else if(true) { }	추가적인 조건이 있을 경우 else if 를 사용한다.
else { }

SWITCH
swich(a) {		(a)해당하는 값을 찾아 실행하며, 그후의 명령도 실행한다.
	case 1:		조건값에 해당되는 case 만 실행 하고 싶을 경우 break;로 종료한다.
		명령		조건값이 case 에 해당되지 않으면, default 가 실행된다.
	case 2:
		명령 break;
	case 3:
		명령
	default:
		명령
}

/** 반복문 **********************************************/
FOR
WHILE
DO WHILE


/** 오토박싱 & 언박싱 **********************************************/


/** 배열(Array) **********************************************/
[]


/** 제네릭<> **********************************************/
객체를 수집 관리하는 걸랙션을 이용할 떄 반드시 사용된다.
제네릭을 사용하면 데이터를 저장하는 시점에 어떤 데이터를 지정할 것인지 명시 할 수 있다.

/** 자료구조(Collections) **********************************************/
Collection interface	순서없는 객체들의 집합
List	순차적 나열로  순서 지정이 가능한 객체들의 집합
Set		중복을 허용하지 않는 객체들의 집합
Queue	FIFO 처음 저장하는 객체가 가장 먼저 나오는 구조의 집합
Map		key와 vlaue로 이루어진 객체들의 집합

Collection Interface	컬랙션 프레임워크의 최상위 인터페이스이다.
						요소의 삽입, 삭제, 탐색의 기능을 정의한다.
						자바8 버전 이후 Stream 관련 디폴트 메소드들이 추가 되었다.
주요 method				add(), clear(), contains(), isEmpty(), remove(), size(), iterator()등

List		순차적으로 저장, index로 접근, 중복 값과 null값을 요소로 가질수 있다. 
ArrayList	배열 형식의 인접하는 연속되는 형태의 리스트, 고정 길이 저장공간으로 관리
			배열은 고정 저장 용량만 허용하나, ArrayList는 허용치 이상을 저장하는 경우 저장공간을 늘린다.
LinkedList	하나의 객체가 다음객체의 위치를 포인팅하는 형태의 리스트, 집합하는 요소들을 node라고 표현한다.
			각 노드들을 서로 연결하여 리스트를 구성한다. 다음 노드에 대한 참조정보를 가지고 있다. 때문에 용량의 개념이 없다.

Set			저장하는 요소의 중복을 허용하지 않는다. get메소드를 제공하지 않기 떄문에, 전체를 순회하면서 데이터를 찾아야 한다.
HashSet			
LinkedHashSet	
TreeSet			
/** 객체지향(OOP) **********************************************/


/** 인터페이스 **********************************************/


/** 클래스 **********************************************/
객체의 청사진 이며 [필드, 생성자, 메소드]로 구성된다.

필드		객체의 속성이다.
생성자	
메소드	객체의 행위이다.

/** 인스턴스 **********************************************/


/** 상속 **********************************************/


/** 생성자 **********************************************/


/** 메소드 **********************************************/


/** 접근제어자 **********************************************/


/** 오버라이드 **********************************************/


/** 오버로드 **********************************************/


/** 람다식 **********************************************/


/** 스트림 **********************************************/