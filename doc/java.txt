/** 숫자 & 문자열 **********************************************/
자바에서는 문자는 ""로 감싸 작성하며, ''로 작성시 에러가 난다.
문자안에 "를 문자로 넣고 싶을 경우 이스케이프 문자(\)를 앞에 붙여 사용한다.
숫자는 숫자만 사용한다.

/** 변수 - 변하는 값 **********************************************/
변수는 데이터를 담는 공간이며, [데이터타입] [변수명]; 으로 선언후 할당하여 사용한다.
사용 방식에 따라 지역변수, 매개변수, 인스턴스 변수, 정적 변수로 나뉜다.

/** 상수 - 변하지 않는 값 **********************************************/

/** 데이터 타입 **********************************************/
char	문자(2BYTE)	하나의 글자를 의미한다.
String	문자열()		char의 배열을 사용한다. 문자가 작성된 만큼 데이터가 늘어난다.(한계 용량은 heap 메모리와 연관있다.)
byte	정수(1BYTE)	-128~127
short	정수(2BYTE)	-32,768~32,767
int		정수(4BYTE)	-2,147,483,648~2,147,483,647
long	정수(8BYTE)	-9,223,372,036,854,775,808~9,223,372,036,854,775,807
double	실수(4BYTE)	굉장히크다(기본으로 사용)
float	실수(8BYTE)	굉장히더크다
boolean				true, false 를 변수로 입력하여 사용한다.

/** 형변환 & 자동형변환 **********************************************/

/** 연산자(operator) **********************************************/

산술연산자
+	더하기	++ 사용하여 1씩 플러스 할수 있다.
-	뺴기		-- 사용하여 1씩 마이너스 할수 있다.
*	곱하기
/	나누기
%	나머지

비교연산자
==	좌항과 우항의 값이 같으면 true("".equals("")으로도 사용한다.)
!=	좌항과 우항의 값이 다르면 true
>	좌항이 우항보다 크면 true
<	좌항이 우항보다 작으면 true
<=	좌항이 우항보다 작거나 같으면 true
>=	좌항이 우항보다 크거나 같으면 true

논리연산자
&&	AND		조건중 값이 ture인것을 찾을 때 사용
||	OR		조건중 값이 하나라도 true인것을 찾을 때 사용
!	NOT		부정 true 앞에 붙이면 false, false 앞에 붙이면 true로 바꾼다

/** 조건문 **********************************************/
IF
if(ture) { }	if절과 {}(then절)로 구성된다.

ELSE
if(true) {	}		if만으로는 처리 하기 어려울때 else 를 사용한다. 
else if(true) { }	추가적인 조건이 있을 경우 else if 를 사용한다.
else { }

SWITCH
swich(a) {		(a)해당하는 값을 찾아 실행하며, 그후의 명령도 실행한다.
	case 1:		조건값에 해당되는 case 만 실행 하고 싶을 경우 break;로 종료한다.
		명령		조건값이 case 에 해당되지 않으면, default 가 실행된다.
	case 2:
		명령 break;
	case 3:
		명령
	default:
		명령
}

/** 반복문 **********************************************/
FOR
WHILE
DO WHILE


/** 오토박싱 & 언박싱 **********************************************/


/** 배열(Array) **********************************************/
[]


/** 제네릭<> **********************************************/
객체를 수집 관리하는 걸랙션을 이용할 떄 반드시 사용된다.
제네릭을 사용하면 데이터를 저장하는 시점에 어떤 데이터를 지정할 것인지 명시 할 수 있다.

/** 자료구조(Collections) **********************************************/
Collection interface	순서없는 객체들의 집합
List	순차적 나열로  순서 지정이 가능한 객체들의 집합
Set		중복을 허용하지 않는 객체들의 집합
Queue	FIFO 처음 저장하는 객체가 가장 먼저 나오는 구조의 집합
Map		key와 vlaue로 이루어진 객체들의 집합

Collection Interface	컬랙션 프레임워크의 최상위 인터페이스이다.
						요소의 삽입, 삭제, 탐색의 기능을 정의한다.
						자바8 버전 이후 Stream 관련 디폴트 메소드들이 추가 되었다.
주요 method				add(), clear(), contains(), isEmpty(), remove(), size(), iterator()등

List		순차적으로 저장, index로 접근, 중복 값과 null값을 요소로 가질수 있다. 
ArrayList	배열 형식의 인접하는 연속되는 형태의 리스트, 고정 길이 저장공간으로 관리
			배열은 고정 저장 용량만 허용하나, ArrayList는 허용치 이상을 저장하는 경우 저장공간을 늘린다.
LinkedList	하나의 객체가 다음객체의 위치를 포인팅하는 형태의 리스트, 집합하는 요소들을 node라고 표현한다.
			각 노드들을 서로 연결하여 리스트를 구성한다. 다음 노드에 대한 참조정보를 가지고 있다. 때문에 용량의 개념이 없다.

Set			저장하는 요소의 중복을 허용하지 않는다. get메소드를 제공하지 않기 떄문에, 전체를 순회하면서 데이터를 찾아야 한다.
HashSet			
LinkedHashSet	
TreeSet			
/** 객체지향(OOP) **********************************************/


/** 인터페이스 **********************************************/


/** 클래스 **********************************************/
객체의 청사진 이며 [필드, 생성자, 메소드]로 구성된다.

필드		객체의 속성이다.
생성자	
메소드	객체의 행위이다.

/** 인스턴스 **********************************************/


/** 상속 **********************************************/


/** 생성자 **********************************************/
객체의 구성요소 중의 하나로 객체를 인스턴스화 할떄 가장 먼저 호출되는 특수한 메소드이다.
생성자의 역할은 객체가 갖는 필드의 초기화이며, 모든 클래스는 하나 이상의 생성자를 갖는다.
생성자의 이름은 클래스와 동일 해야 하며, 오버로딩을 통해 여러개의 생성자를 만들수 있다.
생성자는 메소드 이지만 반환타입이 존재하지 않는다.

this() 생성자
다수의 생성자 간에 this() 생성자를 통해 호출이 가능하다.
this() 생성자는 중복 코드를 제거하고 생성자를 재사용하기 위해 사용한다.
this() 생성자의 호출은 반드시 생성자의 이름(해드)의 바로 아래에 위치해야 한다.

super 생성자

/** 메소드 **********************************************/
객체는 속성과 행위로 구성되는데 속성은 feild, 멤버변수 행위는 method 맴버함수로 불린다.
메소드는 하나의 기능을 수행한다. 입출력 값이 있을 수도 없을 수도 있다.
객체 생성 이후 .메소드명으로 호출하여 사용한다.

작성 문법
([static] | [final]) [접근제어자] [반환타입] [메소드명](파라미터) { }
public int getUserAge() {
	return this.age;
}

호출 문법
[객체 타입] [변수명] = [생성자]
[변수명].[메소드명]
User user = new User();
user.getUserAge();

/** 접근제어자 **********************************************/
Access Modifier	멤버 또는 클래스에 사용되어 외부에서 접근하지 못하도록 제한하는 역할이다.
				제외시 default가 기본이며, 클래스, 멤버변수, 메소드, 생성자에 사용된다.
				캡슐화 하여 클래스의 내부에 선언된 데이터를 보호하기위해 사용한다. 

private			같은 클래스 내에서만 접근 가능
default			같은 패키지 내에서만 접근 가능
protected		같은 패키지 내에서, 그리고 다른 패키지의 자손 클래스에서 접근 가능
public			접근 제한이 전혀 없음

private < default < protected < public 순으로 보다 많은 접근을 허용한다.

제어자		같은클래스	같은패키지	자손클래스	 전체
public		O			O			O			O
protected	O			O			O			X
default		O			O			X			X
private		O			X			X			X


/** static & final **********************************************/
static & final 키워드는 클래스, 필드, 메소드에 적용할 수 있는 키워드이며, 위치에 따라 다른 의미를 갖는다.
static 키워드는 정적 키워드로 정적 필드, 정적 메소드를 선언할 떄 사용한다.
final 키워드를 필드에 정의할 경우 초기 한번의 초기화만 가능하여 이후에는 다른 값을 대입할 수 없다.

정적 필드, 정적 메소드 <> 인스턴스 필드, 인스턴스 메소드

final
클래스, 필드, 메소드, 지역변수, 파라미터에 적용 가능
클래스의 final은 상속을 허용하지 않으며, 메소드의 final은 오버라이딩을 금지한다.
필드, 지역변수, 파라미터에 final은 한번 초기화 한 이후에 변경 불가능하다.
final 필드의 초기화 방식은 필드 선언 시점의 초기화, 초기화 블록, 생성자를 통한 초기화 방법 3가지가 있다.

static
static 필드는 정적 필드 또는 클래스 변수 라고 한다.
정적 필드는 해당 클래스의 모든 인스턴스 객체들이 공유하는 변수이며 이런 의미가 바로 클래스 변수이다.
정적 필드는 객체의 인스턴스화(생성) 없이 클래스 이름으로 정적 필드에 접근할 수 있다.
static 메모리 영역에 존재하며 같은 타입의 객체들과 공유한다.
static 메소드는 정적 메소드 또는 클래스 메소드라고 한다.
클래스 이름을 통해 접근하여 사용한다.

static 과 final이 동시에 정의된 필드를 사용자 정의 상수라고 한다.
사용자 정의 상수는 정적 필드나 메소드의 접근과 마찬가지로 클래스 이름을 통해 접근하여 사용한다.
사용자 정의 상수는 접근 지정자의 점위에 따라 공유하는 범위가 결정된다.
사용자 정의 상수는 대문자로만 작성하며 단어사이에 _를 사용한다.


/** 자바 메모리 **********************************************/
JVM이 관리하는 메모리는 크게 static, stack, Heap 3가지로 나뉜다.

static	스태틱 또는 메소드 영역으로 메소드의 바이트 코드, 스태틱 변수가 할당 된다.
stack	지역변수, 매개 변수가 할당 되는 영역으로 초기화가 진행되지 않는다.
Heap	배열과 모든 인스턴스 객체가 할당되는 영역으로 자동 초기화가 진행된다.


/** 오버라이드 **********************************************/


/** 오버로드 **********************************************/
메소드명부터 파라미터까지를 메소드 시그니처라고 하며, 하나의 클래스 안에서 같은 이름(기능)을 가진 메소드의 시그니처를
다르게 작성하는 것을 오버로드라고 한다. 가령 sum이라는 메소드를 여럿 작성할 경우, 파라미터 갯수를 달리하거나 파라미터 타입을
다르게 주어 작성한다.

public int sum(int a, int b) {}
public int sum(int a, int b, int c) {}
public int sum(double a, double b) {}

/** 람다식 **********************************************/


/** 스트림 **********************************************/